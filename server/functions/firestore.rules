rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /game-details/{document=**} {
      allow read: if request.auth != null;
      allow write: if false;  // Only allow writes through Cloud Functions
    }
    
    match /game-rankings/{document=**} {
      allow read: if request.auth != null;
      allow write: if false;  // Only allow writes through Cloud Functions
    }
    
    // API cache collection
    match /api-cache/{document=**} {
      allow read, write: if false;
    }
    
    // Rate limiting collection
    match /ratelimits/{document=**} {
      allow read, write: if false;
    }

    // Roadmap cards collection
    match /roadmap_cards/{cardId} {
      // Helper functions
      function isAdmin() {
        return request.auth.token.email == 'your-admin-email@example.com';
      }

      function isValidCard() {
        let requiredFields = ['title', 'description', 'status', 'createdBy', 'createdAt', 'tags', 'votes'];
        let card = request.resource.data;
        return card.keys().hasAll(requiredFields)
          && card.title is string && card.title.size() >= 3
          && card.description is string && card.description.size() >= 10
          && card.status in ['planned', 'in-progress', 'completed']
          && card.createdBy == request.auth.uid
          && card.createdAt is timestamp
          && card.tags is list
          && card.votes is map 
          && card.votes.keys().hasAll(['up', 'down', 'userVotes'])
          && card.votes.up is number
          && card.votes.down is number
          && card.votes.userVotes is map;
      }

      // Rules
      allow read: if request.auth != null;
      
      allow create: if request.auth != null 
        && isValidCard();
      
      allow update: if request.auth != null
        && (
          // Allow admin to update any field
          isAdmin()
          ||
          // Allow users to only update their vote
          (
            request.resource.data.diff(resource.data).affectedKeys()
              .hasOnly(['votes', 'priority'])
            && request.resource.data.votes.userVotes.diff(resource.data.votes.userVotes)
              .addedKeys().hasOnly([request.auth.uid])
          )
        );
      
      allow delete: if request.auth != null && isAdmin();
    }
  }
}
